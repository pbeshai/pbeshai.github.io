{"version":3,"sources":["webpack:///./src/templates/Demo.js"],"names":["jsLibs","d3v4","d3v5","Demo","scriptRef","React","createRef","componentDidMount","this","loadScripts","componentDidUpdate","prevProps","props","getScripts","post","data","markdownRemark","scripts","frontmatter","js_libs","concat","map","libId","script","publicURL","allScripts","promise","Promise","resolve","current","innerHTML","src","then","reject","document","createElement","type","onreadystatechange","onload","appendChild","loader","render","pageTitle","title","description","metaImage","img","childImageSharp","fixed","slug","fields","property","content","ref","p","mx","maxWidth","max_width","fontSize","color","listStyleType","blog","to","github","tweet","renderAst","htmlAst","Component","query"],"mappings":"wRAcA,IAAMA,EAAS,CACbC,KAAM,gCACNC,KAAM,iCAGFC,E,4JACJC,UAAYC,IAAMC,Y,oHAElBC,kBAAA,WAEEC,KAAKC,e,EAGPC,mBAAA,SAAmBC,GACbH,KAAKG,YAAcH,KAAKI,OAC1BJ,KAAKC,e,EAITI,WAAA,WAAc,IAENC,EADWN,KAAKI,MAAdG,KACUC,eAEdC,EAAU,GAad,OAZIH,EAAKI,YAAYC,UACnBF,EAAUA,EAAQG,OAChBN,EAAKI,YAAYC,QAAQE,KAAI,SAAAC,GAAK,OAAItB,EAAOsB,QAI7CR,EAAKI,YAAYD,UACnBA,EAAUA,EAAQG,OAChBN,EAAKI,YAAYD,QAAQI,KAAI,SAAAE,GAAM,OAAIA,EAAOC,eAI3CP,G,EAGTR,YAAA,WAAe,IAAD,OACNgB,EAAajB,KAAKK,aACpBa,EAAUC,QAAQC,UACtBpB,KAAKJ,UAAUyB,QAAQC,UAAY,GAC9BtB,KAAKJ,UAAUyB,QAGpB,IAPY,+GAgCDE,EAhCC,EAiCVL,EAAUA,EAAQM,MAAK,kBA1BV,SAAAD,GACb,OAAO,IAAIJ,SAAQ,SAACC,EAASK,GAC3B,IAAMV,EAASW,SAASC,cAAc,UACtCZ,EAAOa,KAAO,kBACdb,EAAOQ,IAAMA,EAIbR,EAAOc,mBAAqB,WAC1BT,EAAQG,IAEVR,EAAOe,OAAS,WACdV,EAAQG,IAIL,EAAK3B,UAAUyB,QAGlB,EAAKzB,UAAUyB,QAAQU,YAAYhB,GAFnCU,EAAOF,MASkBS,CAAOT,OADtC,EAAkBN,EAAlB,wDAA8B,CAAC,IAAD,2B,EAKhCgB,OAAA,WAAU,IAEF3B,EADWN,KAAKI,MAAdG,KACUC,eAElB,OACE,kBAAC,IAAD,CACE0B,UAAW5B,EAAKI,YAAYyB,MAC5BC,YAAa9B,EAAKI,YAAY0B,YAC9BC,UACE/B,EAAKI,YAAY4B,KAAOhC,EAAKI,YAAY4B,IAAIC,gBAAgBC,MAAMjB,IAErEkB,KAAMnC,EAAKoC,OAAOD,MAElB,kBAAC,IAAD,KACE,0BAAME,SAAS,UAAUC,QAAQ,aAEnC,yBAAKC,IAAK7C,KAAKJ,YACf,kBAAC,IAAD,CAAKkD,EAAG,EAAGC,GAAG,OAAOC,SAAU1C,EAAKI,YAAYuC,WAAa,KAC3D,kBAAC,IAAD,CAAQC,SAAU,GAAI5C,EAAKI,YAAYyB,OACvC,kBAAC,IAAD,CAAYgB,MAAO,SAAUC,cAAc,QACxC9C,EAAKI,YAAY2C,MAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMC,GAAIhD,EAAKI,YAAY2C,MAA3B,cAGH/C,EAAKI,YAAY6C,QAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMD,GAAIhD,EAAKI,YAAY6C,QAA3B,WAGHjD,EAAKI,YAAY8C,OAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMF,GAAIhD,EAAKI,YAAY8C,OAA3B,mBAILC,YAAUnD,EAAKoD,Y,GA3GP7D,IAAM8D,WAkHVhE,YAER,IAAMiE,EAAK","file":"component---src-templates-demo-js-7f31a409b245dec85014.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport Helmet from 'react-helmet';\n\nimport renderAst from '../utils/renderAst';\nimport Layout from '../components/layout';\nimport {\n  Box,\n  Link,\n  Header,\n  InlineList,\n  InlineListItem,\n} from '../components/core';\n\nconst jsLibs = {\n  d3v4: 'https://d3js.org/d3.v4.min.js',\n  d3v5: 'https://d3js.org/d3.v5.min.js',\n};\n\nclass Demo extends React.Component {\n  scriptRef = React.createRef();\n\n  componentDidMount() {\n    // start loading scripts\n    this.loadScripts();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.prevProps !== this.props) {\n      this.loadScripts();\n    }\n  }\n\n  getScripts() {\n    const { data } = this.props;\n    const post = data.markdownRemark;\n\n    let scripts = [];\n    if (post.frontmatter.js_libs) {\n      scripts = scripts.concat(\n        post.frontmatter.js_libs.map(libId => jsLibs[libId])\n      );\n    }\n\n    if (post.frontmatter.scripts) {\n      scripts = scripts.concat(\n        post.frontmatter.scripts.map(script => script.publicURL)\n      );\n    }\n\n    return scripts;\n  }\n\n  loadScripts() {\n    const allScripts = this.getScripts();\n    let promise = Promise.resolve();\n    this.scriptRef.current.innerHTML = '';\n    if (!this.scriptRef.current) {\n    }\n\n    const loader = src => {\n      return new Promise((resolve, reject) => {\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = src;\n\n        // Then bind the event to the callback function.\n        // There are several events for cross browser compatibility.\n        script.onreadystatechange = () => {\n          resolve(src);\n        };\n        script.onload = () => {\n          resolve(src);\n        };\n\n        // Fire the loading\n        if (!this.scriptRef.current) {\n          reject(src);\n        } else {\n          this.scriptRef.current.appendChild(script);\n        }\n      });\n    };\n\n    // make them load in order\n    for (const src of allScripts) {\n      promise = promise.then(() => loader(src));\n    }\n  }\n\n  render() {\n    const { data } = this.props;\n    const post = data.markdownRemark;\n\n    return (\n      <Layout\n        pageTitle={post.frontmatter.title}\n        description={post.frontmatter.description}\n        metaImage={\n          post.frontmatter.img && post.frontmatter.img.childImageSharp.fixed.src\n        }\n        slug={post.fields.slug}\n      >\n        <Helmet>\n          <meta property=\"og:type\" content=\"article\" />\n        </Helmet>\n        <div ref={this.scriptRef} />\n        <Box p={3} mx=\"auto\" maxWidth={post.frontmatter.max_width || 800}>\n          <Header fontSize={4}>{post.frontmatter.title}</Header>\n          <InlineList color={'gray.6'} listStyleType=\"none\">\n            {post.frontmatter.blog && (\n              <InlineListItem>\n                <Link to={post.frontmatter.blog}>Blog Post</Link>\n              </InlineListItem>\n            )}\n            {post.frontmatter.github && (\n              <InlineListItem>\n                <Link to={post.frontmatter.github}>GitHub</Link>\n              </InlineListItem>\n            )}\n            {post.frontmatter.tweet && (\n              <InlineListItem>\n                <Link to={post.frontmatter.tweet}>Related Tweet</Link>\n              </InlineListItem>\n            )}\n          </InlineList>\n          {renderAst(post.htmlAst)}\n        </Box>\n      </Layout>\n    );\n  }\n}\n\nexport default Demo;\n\nexport const query = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      htmlAst\n      frontmatter {\n        title\n        blog\n        description\n        github\n        tweet\n        max_width\n        js_libs\n        scripts {\n          publicURL\n        }\n        img {\n          childImageSharp {\n            fixed(width: 1200, height: 630, quality: 90) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n      }\n      fields {\n        slug\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}