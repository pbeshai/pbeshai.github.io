{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "ColorLegend.svelte",
    "Core.svelte",
    "GamesPlayedLegend.svelte",
    "MinutesLegend.svelte",
    "PlayersList.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from 'svelte';\n  import { groups } from 'd3-array';\n  // import Core from './Core.svelte';\n  import Core from './Core.svelte';\n  import ColorLegend from './ColorLegend.svelte';\n  import MinutesLegend from './MinutesLegend.svelte';\n  import GamesPlayedLegend from './GamesPlayedLegend.svelte';\n  import PlayersList from './PlayersList.svelte';\n\n  // let teamEntries = [];\n  // onMount(async () => {\n  //   const res = await fetch(`/data/winners.json`);\n  //   const winners = await res.json();\n  //   teamEntries = groups(winners, (d) => d.team_abbr);\n  //   // teamEntries = teamEntries.filter((d) => d[0] === 'LAL');\n  // });\n  export let winners = [];\n  const teamEntries = groups(winners, (d) => d.team_abbr);\n</script>\n\n<style>\n  main {\n    padding: 4em;\n    width: 820px;\n    margin: 0 auto;\n  }\n\n  a {\n    color: #fff;\n    opacity: 0.8;\n  }\n\n  a:hover {\n    opacity: 1;\n  }\n\n  header {\n    margin-bottom: 72px;\n    color: #9594BD;\n  }\n\n  .description {\n    color: #9594BD;\n    max-width: 70ch;\n    line-height: 1.5;\n  }\n\n  h1 {\n    color: #fff;\n    font-size: 48px;\n    font-weight: 800;\n    margin: 0;\n    letter-spacing: -1px;\n  }\n  .subhead {\n    font-size: 24px;\n    color: #9594BD;\n    margin-bottom: 12px;\n  }\n\n  h2 {\n    color: #fff;\n    font-size: 32px;\n    font-weight: 800;\n    margin: 0;\n    margin-bottom: 12px;\n  }\n  .legends {\n    margin-bottom: 32px;\n    display: flex;\n    justify-content: flex-start;\n    align-items: flex-start;\n  }\n  .legend-item {\n    margin-right: 32px;\n  }\n  .legend-item:last-child {\n    margin-right: 0;\n  }\n\n  .core-grid {\n    margin: 0 auto;\n    display: flex;\n    align-items: flex-start;\n    flex-direction: column;\n  }\n\n  .core-area {\n    display: flex;\n    align-items: center;\n  }\n  .core {\n    margin-right: 64px;\n  }\n\n  .item {\n    margin-bottom: 128px;\n  }\n\n  em {\n    font-weight: 400;\n    font-style: normal;\n    color: #c0beef;\n  }\n</style>\n\n<main>\n  <header>\n    <h1>NBA Winning Cores</h1>\n    <div class=\"subhead\">For the 2019-20 season</div>\n    <div>By <a href=\"https://twitter.com/pbesh\">Peter Beshai</a></div>\n    <div class=\"description\">\n      <p>\n        I wanted to look at how teams were constructed based on how many <em>winners</em> were on the team – as primary players or locker room presences – so I put together this visualization that breaks down teams based on:\n      </p>\n      <ul>\n        <li> <em>career milestone</em> – how far have they made it in the playoffs?</li>\n        <li> <em>career win percentages</em> – do they win more often than not?</li>\n        <li> <em>career games played</em> – do they have a lot of NBA experience?</li>\n      </ul>\n      <p>\n        The only data used from the 2019-20 season is for ordering the players on the teams, the rest\n        is using data prior to the season. The top 5 most minutes are separated as the team's core.\n      </p>\n    </div>\n  </header>\n  <div class=\"core-grid\">\n    {#each teamEntries as [abbr, players], i}\n    <div class=\"item\">\n      <h2>{players[0].team_full_name}</h2>\n      <div class=\"legends\">\n        <div class=\"legend-item\"><ColorLegend /></div>\n        <div class=\"legend-item\"><GamesPlayedLegend /></div>\n        <div class=\"legend-item\"><MinutesLegend /></div>\n      </div>\n      <div class=\"core-area\">\n        <div class=\"core\"><Core team={abbr} {players} /></div>\n        <div class=\"players\"><PlayersList {players} /></div>\n      </div>\n    </div>\n    {/each}\n  </div>\n\n  <div class=\"description footer-desc\">\n    <p>\n      Thanks for checking it out! If you have any questions or comments, reach out to me on twitter <a href=\"https://twitter.com/pbesh\">@pbesh</a>.\n    </p>\n    <p>— <a href=\"https://peterbeshai.com/\">Peter Beshai</a></p>\n    <p>Made November 1, 2020</p>\n  </div>\n    \n  </main>\n",
    "<script>\n  import { hsl } from 'd3-color';\nimport {\nscaleLinear,\n\n\nscaleThreshold\n} from 'd3-scale';\n\n  const colorScale = scaleThreshold()\n    .domain([0.5, 0.6]) // 60%+ is roughly 85th percentil, 50% is roughly 54th percentile\n    .range(['#2d3467', '#3c9245', '#f9ce1a'])\n    .range(['#0d478a', '#1c9a8b', '#f9ce1a'])\n    .range(['#0d478a', '#9e8667', '#f9ce1a'])\n    .range(['#992B3D', '#0d478a', '#24C79E'])\n    .range(['#cc002f', '#df7f45', '#eecb61'])\n    .range(['#912d2c', '#d88130', '#fbe254'])\n    .range(['#edf8b1', '#7fcdbb', '#2c7fb8'])\n    .range(['#fff58d', '#5bb68f', '#00649f'].reverse())\n\n  const blockHeight = 4;\n\n  const blocks = [\n    {color: colorScale.range()[0], label: '< 50%' },\n    {color: colorScale.range()[1], label: '50–60%' },\n    {color: colorScale.range()[2], label: '60%+' },\n  ]\n\n  </script>\n\n<style>\n  \n  .blocks {\n    display: flex;\n  }\n  .block {\n    flex: 1;\n    margin-right: 2px;\n  }\n  .block:last-child {\n    margin-right: 0;\n  }\n</style>\n\n\n  <div class=\"legend\">\n    <div><span class=\"header\">Career Win % </span><span class=\"secondary\">Prior to 2019-20</span></div>\n    <div class=\"blocks\">\n      {#each blocks as block}\n      <div class=\"block\">\n        <div style=\"height: {blockHeight}px; background-color: {block.color};\"></div>\n        <div>{block.label}</div>\n      </div>\n      {/each}\n    </div>\n    \n  </div>",
    "<script>\n  import {\n    scaleLinear,\n    scaleQuantize,\n    scaleSequential,\n    scaleThreshold,\n  } from 'd3-scale';\n  import { arc as d3arc } from 'd3-shape';\n  import { cumsum } from 'd3-array';\n  import { hsl } from 'd3-color';\n  import { interpolateInferno, schemeRdYlBu } from 'd3-scale-chromatic';\n  export let team;\n  export let players;\n\n\n  const angleGlobalOffset = 0.0 * Math.PI;\n  export let width = 600;\n  let height = 600;\n\n  const angleMap = {\n    'rookie': (1 / 6) * 2 * Math.PI,\n    'never-playoffs': (2 / 6) * 2 * Math.PI,\n    'played-playoffs': (3 / 6) * 2 * Math.PI,\n    'won-playoff-series': (4 / 6) * 2 * Math.PI,\n    'played-finals': (5 / 6) * 2 * Math.PI,\n    'won-finals': (6 / 6) * 2 * Math.PI,\n  };\n  const labelMap = {\n    'rookie': 'Rookies',\n    'never-playoffs': 'Regular Season',\n    'played-playoffs': 'Made Playoffs',\n    'won-playoff-series': 'Won a Series',\n    'played-finals': 'Made Finals',\n    'won-finals': 'Champions',\n  };\n  \n\n  const margin = { top: 10, right: 10, bottom: 10, left: 10 };\n  const innerRadius = 20;\n  const ringMargin = 5;\n  const refRingMargin = ringMargin * 4;\n\n  function darkerColor(color) {\n    let c = hsl(color);\n    c.l -= 0.05;\n    c.s -= 0.05;\n    return c.toString();\n  }\n\n  function lighterColor(color) {\n    let c = hsl(color);\n    c.l += 0.2;\n    c.s += 0.2;\n    return c.toString();\n  }\n\n  function glowColor(color, factor = 1) {\n    let c = hsl(color);\n    c.l += factor * 0.02;\n    c.s += factor * 0.02;\n    return c.toString();\n  }\n  // based on games played\n  let thicknessScale = scaleLinear().domain([0, 1000]).range([2, 10]);\n  const maxThickness = thicknessScale.range()[1];\n  // thicknessScale = (d) => 4;\n  const thicknessKey = 'career_gp';\n  const colorScale = scaleThreshold()\n    .domain([0.5, 0.6]) // 60%+ is roughly 85th percentil, 50% is roughly 54th percentile\n    .range(['#2d3467', '#3c9245', '#f9ce1a'])\n    .range(['#0d478a', '#1c9a8b', '#f9ce1a'])\n    .range(['#0d478a', '#9e8667', '#f9ce1a'])\n    .range(['#992B3D', '#0d478a', '#24C79E'])\n    .range(['#cc002f', '#df7f45', '#eecb61'])\n    .range(['#912d2c', '#d88130', '#fbe254'])\n    .range(['#edf8b1', '#7fcdbb', '#2c7fb8'])\n    .range(['#fff58d', '#5bb68f', '#00649f'].reverse())\n  const noGpColor = '#6b7280';\n\n  const colorScaleOuter = colorScale\n    .copy()\n    .range(colorScale.range().map(darkerColor));\n\n  // .range(['#AD813F', '#d1d5db', '#f9ce1a']) // \"medals\"\n  // .range(['#ffeda0', '#feb24c', '#f03b20'])\n\n  var arc = d3arc();\n\n  const colorScale2 = scaleSequential((t) => interpolateInferno(t * 0.8 + 0.2));\n  window.c = colorScale;\n  //.range(schemeRdYlBu[9]);\n  // .range(['blue', 'gray', 'red', 'purple', 'lime']);\n  const colorKey = 'career_win_pct';\n  const refIndex = 4;\n\n  // let sortedPlayers = players.slice().filter(d => d.career_gp > 0); //players.slice().reverse();\n  let sortedPlayers = players\n\n  const thickness = sortedPlayers.map((d) =>\n    Math.round(thicknessScale(d[thicknessKey]))\n  );\n  const cumulativeThickness = cumsum(sortedPlayers, (d) =>\n    Math.round(thicknessScale(d[thicknessKey]))\n  );\n\n  const refLineLength =\n    cumulativeThickness[cumulativeThickness.length - 1] +\n    ringMargin * (players.length - 1) +\n    innerRadius +\n    refRingMargin +\n    10;\n  height = refLineLength * 2 + margin.top + margin.bottom;\n  width = height;\n  const innerWidth = width - margin.left - margin.right;\n  const innerHeight = height - margin.top - margin.bottom;\n\n  const refRingRadius =\n    cumulativeThickness[refIndex] +\n    ringMargin * refIndex +\n    innerRadius +\n    refRingMargin / 2 +\n    ringMargin / 2;\n  // thickness[refIndex] / 2;\n\n  let gradientId = `gradient-${team}`;\n  let gradientId2 = `gradient-${team}2`;\n  const highlightWidth = 2;\n\n\n  const innerRadii = sortedPlayers.map((d, i) => innerRadius +\n                  (cumulativeThickness[i - 1] ?? 0) +\n                  ringMargin * i +\n                  (i > refIndex ? refRingMargin : 0))\n  const outerRadii = sortedPlayers.map((d, i) => innerRadius +\n                  cumulativeThickness[i] +\n                  ringMargin * i +\n                  \n                  (i > refIndex ? refRingMargin : 0))\n\n  const endAngles = sortedPlayers.map((player, i) => (angleMap[player.career_gp === 0 ? 'rookie' : player.playoff_status ?? 'never-playoffs']));\n\n  \n  const refPoints = Object.keys(angleMap).map((key, i) => ({\n    key,\n    angle: angleMap[key],\n    r: refLineLength - 8,\n    color: ['red', 'green', 'blue', 'cyan', 'magenta', 'yellow', 'black'][i],\n    x: Math.cos(angleMap[key] - angleGlobalOffset - Math.PI * 0.5) * (refLineLength - 8),\n    y: Math.sin(angleMap[key] - angleGlobalOffset - Math.PI * 0.5) * (refLineLength - 8),\n  }))\n  for (let i= 0; i < refPoints.length; ++i) {\n    refPoints[i].prev = refPoints[(i - 1 + refPoints.length) % refPoints.length];\n    refPoints[i].next = refPoints[(i + 1) % refPoints.length];\n  }\n\n</script>\n\n<style>\n  h5 {\n    margin: 0;\n  }\n  svg {\n    overflow: visible;\n  }\n</style>\n\n<div>\n  <svg {width} {height}>\n    <defs>\n      <radialGradient id={gradientId}>\n        <stop offset=\"5%\" stop-color=\"hsl(229deg 69% 20%)\" />\n        <stop offset=\"100%\" stop-color=\"hsla(229deg, 69%, 20%, 0)\" />\n      </radialGradient>\n      <linearGradient id={gradientId2} gradientTransform=\"rotate(-20)\">\n        <stop offset=\"0%\" stop-color=\"hsla(229deg, 69%, 20%, 0)\" />\n        <stop offset=\"100%\" stop-color=\"hsla(229deg, 69%, 30%, 0.8)\" />\n      </linearGradient>\n    </defs>\n    <g transform=\"translate({margin.left} {margin.top})\">\n      <g transform=\"translate({innerWidth / 2} {innerHeight / 2})\">\n        <circle\n          r={width * 0.2}\n          xfill=\"hsl(229deg 69% 20%)\"\n          fill=\"url(#{gradientId})\" />\n        <circle\n          r={refRingRadius}\n          xfill=\"hsl(229deg 69% 20%)\"\n          fill=\"none\"\n          stroke-width={1.5}\n          stroke-dasharray=\"3 2\"\n          stroke=\"hsl(229deg 69% 35%)\"\n          strokxe=\"lime\" />\n        <g style=\"opacity: 0.5\">\n          <line\n          x1={0} y1={0}\n          x2={Math.cos(angleGlobalOffset - Math.PI * 0.5 + angleMap['rookie']) * refLineLength}\n          y2={Math.sin(angleGlobalOffset - Math.PI * 0.5 + angleMap['rookie']) * refLineLength}\n          stroke=\"#4b5563\" />\n          <line\n            x1={0} y1={0}\n            x2={Math.cos(angleGlobalOffset - Math.PI * 0.5 + angleMap['never-playoffs']) * refLineLength}\n            y2={Math.sin(angleGlobalOffset - Math.PI * 0.5 + angleMap['never-playoffs']) * refLineLength}\n            stroke=\"#4b5563\" />\n          <line\n            x1={0} y1={0}\n            x2={Math.cos(angleGlobalOffset - Math.PI * 0.5 + angleMap['played-playoffs']) * refLineLength}\n            y2={Math.sin(angleGlobalOffset - Math.PI * 0.5 + angleMap['played-playoffs']) * refLineLength}\n            stroke=\"#4b5563\" />\n          <line\n            x1={0} y1={0}\n            x2={Math.cos(angleGlobalOffset - Math.PI * 0.5 + angleMap['won-playoff-series']) * refLineLength}\n            y2={Math.sin(angleGlobalOffset - Math.PI * 0.5 + angleMap['won-playoff-series']) * refLineLength}\n            stroke=\"#4b5563\" />\n          <line\n            x1={0} y1={0}\n            x2={Math.cos(angleGlobalOffset - Math.PI * 0.5 + angleMap['played-finals']) * refLineLength}\n            y2={Math.sin(angleGlobalOffset - Math.PI * 0.5 + angleMap['played-finals']) * refLineLength}\n            stroke=\"#4b5563\" />\n            <!-- <line\n            x1={0}\n            x2={Math.cos(angleGlobalOffset - Math.PI * 0.5 + angleMap['won-finals']) * refLineLength}\n            y1={0}\n            y2={Math.sin(angleGlobalOffset - Math.PI * 0.5 + angleMap['won-finals']) * refLineLength}\n            stroke=\"#4b5563\" /> -->\n        </g>\n        <g>\n          <path\n              d={arc({\n                innerRadius: 0,\n                outerRadius:\n                  refLineLength - 10,\n                startAngle: angleMap['played-finals'] + angleGlobalOffset,\n                endAngle: angleMap['won-finals'] + angleGlobalOffset,\n                \n              })}\n              fill=\"url(#{gradientId2})\"\n              fill-opacity={1} />\n        </g>\n        {#each sortedPlayers as player, i}\n          <g style={`opacity: ${i >= 5 ? 1 : 1}`}>\n            <path\n              d={arc({\n                innerRadius: innerRadii[i],\n                outerRadius: outerRadii[i],\n                startAngle: angleGlobalOffset,\n                endAngle: endAngles[i] +  angleGlobalOffset,\n              })}\n              fill={player.career_gp === 0 ? noGpColor : i >= 5 ? colorScaleOuter(player[colorKey]) : colorScale(player[colorKey])}\n              fill-opacity={1} />\n              <!-- highlights-->\n            <path\n              d={arc({\n                innerRadius:innerRadii[i],\n                outerRadius: outerRadii[i],\n                startAngle: endAngles[i] + angleGlobalOffset - Math.atan(3 / (outerRadii[i])),\n                endAngle: endAngles[i] + angleGlobalOffset,\n              })}\n              fill={glowColor(player.career_gp === 0 ? noGpColor : i >= 5 ? colorScaleOuter(player[colorKey]) : colorScale(player[colorKey]), 2)}\n              fill-opacity={1} />\n            <path\n              d={arc({\n                innerRadius:innerRadii[i],\n                outerRadius: outerRadii[i],\n                startAngle: endAngles[i] + angleGlobalOffset - Math.atan(2 / (outerRadii[i])),\n                endAngle: endAngles[i] + angleGlobalOffset,\n              })}\n              fill={glowColor(player.career_gp === 0 ? noGpColor : i >= 5 ? colorScaleOuter(player[colorKey]) : colorScale(player[colorKey]), 6)}\n              fill-opacity={1} />\n              <path\n              d={arc({\n                innerRadius:innerRadii[i],\n                outerRadius: outerRadii[i],\n                startAngle: endAngles[i] + angleGlobalOffset - Math.atan(1 / (outerRadii[i])),\n                endAngle: endAngles[i] + angleGlobalOffset,\n              })}\n              fill={glowColor(player.career_gp === 0 ? noGpColor : i >= 5 ? colorScaleOuter(player[colorKey]) : colorScale(player[colorKey]), 10)}\n              fill-opacity={1} />\n\n              <!-- champion glow-->\n              {#if player.playoff_status === 'won-finals'}\n              <path\n                d={arc({\n                  innerRadius:innerRadii[i] + thickness[i] * 0.0,\n                  outerRadius: outerRadii[i] - thickness[i] * 0.0,\n                  startAngle: angleGlobalOffset,\n                  endAngle: endAngles[i] + angleGlobalOffset,\n                })}\n                fill={((glowColor(player.career_gp === 0 ? noGpColor : i >= 5 ? colorScaleOuter(player[colorKey]) : colorScale(player[colorKey]), -16)))} />\n              <path\n                d={arc({\n                  innerRadius:innerRadii[i] - 2,\n                  outerRadius: outerRadii[i] + 2,\n                  startAngle: angleGlobalOffset,\n                  endAngle: endAngles[i] + angleGlobalOffset,\n                })}\n                fill={((glowColor(player.career_gp === 0 ? noGpColor : i >= 5 ? colorScaleOuter(player[colorKey]) : colorScale(player[colorKey]), 0)))} \n                fill-opacity={0.2}/>\n                \n              <path\n                d={arc({\n                  innerRadius:innerRadii[i] + thickness[i] * 0.1,\n                  outerRadius: outerRadii[i] - thickness[i] * 0.1,\n                  startAngle: angleGlobalOffset,\n                  endAngle: endAngles[i] + angleGlobalOffset,\n                })}\n                fill={((glowColor(player.career_gp === 0 ? noGpColor : i >= 5 ? colorScaleOuter(player[colorKey]) : colorScale(player[colorKey]), 2)))} />\n              <path\n                d={arc({\n                  innerRadius:innerRadii[i] + thickness[i] * 0.2,\n                  outerRadius: outerRadii[i] - thickness[i] * 0.2,\n                  startAngle: angleGlobalOffset,\n                  endAngle: endAngles[i] + angleGlobalOffset,\n                })}\n                fill={((glowColor(player.career_gp === 0 ? noGpColor : i >= 5 ? colorScaleOuter(player[colorKey]) : colorScale(player[colorKey]), 4)))} />\n              <path\n                d={arc({\n                  innerRadius:innerRadii[i] + thickness[i] * 0.3,\n                  outerRadius: outerRadii[i] - thickness[i] * 0.3,\n                  startAngle: angleGlobalOffset,\n                  endAngle: endAngles[i] + angleGlobalOffset,\n                })}\n                fill={((glowColor(player.career_gp === 0 ? noGpColor : i >= 5 ? colorScaleOuter(player[colorKey]) : colorScale(player[colorKey]), 6)))} />\n              <path\n                d={arc({\n                  innerRadius:innerRadii[i] + thickness[i] * 0.4,\n                  outerRadius: outerRadii[i] - thickness[i] * 0.4,\n                  startAngle: angleGlobalOffset,\n                  endAngle: endAngles[i] + angleGlobalOffset,\n                })}\n                fill={((glowColor(player.career_gp === 0 ? noGpColor : i >= 5 ? colorScaleOuter(player[colorKey]) : colorScale(player[colorKey]), 8)))} />\n              {/if}\n            \n          </g>\n        {/each}\n\n        <g style=\"opacity: 0.5\">\n          <line\n            x1={0}\n            x2={Math.cos(angleGlobalOffset - Math.PI * 0.5) * refLineLength}\n            y1={0}\n            y2={Math.sin(angleGlobalOffset - Math.PI * 0.5) * refLineLength}\n            stroke=\"#9ca3af\"\n            stroke-width={2} />\n            \n        </g>\n      </g>\n\n\n      <g transform=\"translate({innerWidth / 2} {innerHeight / 2})\">\n      <!-- <g>\n        <path d=\"M0      -205    A 205 205 0 0 0 -177.5 -102.5\" fill=\"none\" stroke=\"lime\" id=\"test\" transform=\"translate(0 5)\"/>\n        <path d=\"M-177.5 -102.5  A 205 205 0 0 1 0      -205\" fill=\"none\" stroke=\"yellow\" id=\"test2\"/>\n        <text text-anchor=\"middle\" fill=\"white\">\n          <textPath href={`#test`}  startOffset=\"50%\">testing</textPath>\n          \n        </text>\n        <text text-anchor=\"middle\" fill=\"white\" dy={0}>\n          <textPath href={`#test2`}  startOffset=\"50%\">22222</textPath>\n        </text>\n\n      </g> -->\n\n      <g>\n\n        {#each refPoints as d,i}\n        <defs>\n        <!-- <circle r={5} fill=\"tomato\" cx={d.x} cy={d.y} /> -->\n        {#if i == 0 || i === 4 || i === 5}\n          <path id={`text-path-${team}-${d.key}`} d={`M${d.prev.x} ${d.prev.y} A ${d.r} ${d.r} 0 0 1 ${d.x} ${d.y}`} stroke=\"{d.color}\" fill=\"none\"/>\n        {:else}\n          <path id={`text-path-${team}-${d.key}`} d={`M${d.x} ${d.y} A ${d.r} ${d.r} 0 0 0 ${d.prev.x} ${d.prev.y}`} stroke=\"{d.color}\" fill=\"none\"/>\n        {/if}\n        </defs>\n      <g transform=\"\">\n      <text text-anchor=\"middle\" class=\"milestone-label\" style=\"font-size: 10px; letter-spacing: 1px; text-transform: uppercase\" fill=\"currentColor\" fill-opacity=\"0.6\" dy={i === 0 || i === 4 || i === 5 ? -5 : 15}>\n        <textPath side=\"left\" href={`#text-path-${team}-${d.key}`}  startOffset=\"50%\">{labelMap[d.key]}</textPath>\n      </text>\n    </g>\n      {/each}\n\n      </g>\n    </g>\n    </g>\n  </svg>\n  <!-- \n  <pre>\n    {#each players as player, i}\n      {player.career_gp} {player.season_mp}\n    {'\\n'}\n    {/each}\n  </pre> -->\n</div>\n",
    "<script>\n  \n</script>\n\n<style>\n  .main {\n    flex-direction: row;\n    align-items: center;\n  }\n  .legend-image {\n    margin-right: 1ch;\n  }\n</style>\n\n\n  <div class=\"legend main\">\n    <div class=\"legend-image\">\n      <svg width={72} height={20} style=\"overflow: visible\">\n        <g transform=\"translate(0 10)\">\n          <circle cx={10} cy={0} r={10 - 0.5} fill=\"none\" stroke=\"#6b7280\" stroke-width=\"1\" />\n        <circle cx={36} cy={0} r={10 - 1.5} fill=\"none\" stroke=\"#6b7280\" stroke-width=\"3\" />\n        <circle cx={62} cy={0} r={10 - 2.5} fill=\"none\" stroke=\"#6b7280\" stroke-width=\"5\" />\n        </g>\n      </svg>\n    </div>\n    <div class=\"labels\">\n      <div class=\"header\">Career Games</div>\n      <div class=\"secondary\">Prior to 2019-20</div>\n    </div>\n   \n    \n  </div>",
    "<script>\n  \n</script>\n\n<style>\n  .main {\n    flex-direction: row;\n    align-items: center;\n  }\n  .legend-image {\n    margin-right: 1ch;\n  }\n</style>\n\n\n  <div class=\"legend main\">\n    <div class=\"legend-image\">\n      <svg width={26} height={26} style=\"overflow: hidden\">\n        <g transform=\"translate(11 15)\">\n          <circle cx={0} cy={0} r={4} fill=\"none\" stroke=\"#6b7280\" stroke-width=\"1\" />\n          <circle cx={0} cy={0} r={7} fill=\"none\" stroke=\"#6b7280\" stroke-width=\"1\" />\n          <circle cx={0} cy={0} r={10} fill=\"none\" stroke=\"#6b7280\" stroke-width=\"1\" />\n          <path fill=\"none\" stroke=\"#9694BD\" \n                d=\"M0 0 L13 -13 l-4.5 0 m4.5 0 l0 4.5\" />\n        </g>\n      </svg>\n    </div>\n    <div class=\"labels\">\n      <div class=\"header\">Minutes Played</div>\n      <div class=\"secondary\">In 2019-20</div>\n    </div>\n   \n    \n  </div>",
    "<script>\n  import {\n    scaleLinear,\n    scaleQuantize,\n    scaleSequential,\n    scaleThreshold,\n  } from 'd3-scale';\n  import { arc as d3arc } from 'd3-shape';\n  import { cumsum } from 'd3-array';\n  import { hsl } from 'd3-color';\n  import { interpolateInferno, schemeRdYlBu } from 'd3-scale-chromatic';\n  export let players;\n  const noGpColor = '#6b7280';\n\n\n  const angleGlobalOffset = 0.0 * Math.PI;\n  export let width = 600;\n  let height = 600;\n\n  const angleMap = {\n    'rookie': (1 / 6) * 2 * Math.PI,\n    'never-playoffs': (2 / 6) * 2 * Math.PI,\n    'played-playoffs': (3 / 6) * 2 * Math.PI,\n    'won-playoff-series': (4 / 6) * 2 * Math.PI,\n    'played-finals': (5 / 6) * 2 * Math.PI,\n    'won-finals': (6 / 6) * 2 * Math.PI,\n  };\n  const labelMap = {\n    'rookie': 'Rookies',\n    'never-playoffs': 'Regular Season',\n    'played-playoffs': 'Made Playoffs',\n    'won-playoff-series': 'Won a Series',\n    'played-finals': 'Made Finals',\n    'won-finals': 'Champions',\n  };\n  \n\n  const margin = { top: 10, right: 10, bottom: 10, left: 10 };\n  const innerRadius = 20;\n  const ringMargin = 5;\n  const refRingMargin = ringMargin * 4;\n\n  function darkerColor(color) {\n    let c = hsl(color);\n    c.l -= 0.05;\n    c.s -= 0.05;\n    return c.toString();\n  }\n\n  function lighterColor(color) {\n    let c = hsl(color);\n    c.l += 0.2;\n    c.s += 0.2;\n    return c.toString();\n  }\n\n  function glowColor(color, factor = 1) {\n    let c = hsl(color);\n    c.l += factor * 0.02;\n    c.s += factor * 0.02;\n    return c.toString();\n  }\n  // based on games played\n  let thicknessScale = scaleLinear().domain([0, 1000]).range([2, 10]);\n  const maxThickness = thicknessScale.range()[1];\n  // thicknessScale = (d) => 4;\n  const thicknessKey = 'career_gp';\n  const colorScale = scaleThreshold()\n    .domain([0.5, 0.6]) // 60%+ is roughly 85th percentil, 50% is roughly 54th percentile\n    .range(['#2d3467', '#3c9245', '#f9ce1a'])\n    .range(['#0d478a', '#1c9a8b', '#f9ce1a'])\n    .range(['#0d478a', '#9e8667', '#f9ce1a'])\n    .range(['#992B3D', '#0d478a', '#24C79E'])\n    .range(['#cc002f', '#df7f45', '#eecb61'])\n    .range(['#912d2c', '#d88130', '#fbe254'])\n    .range(['#edf8b1', '#7fcdbb', '#2c7fb8'])\n    .range(['#fff58d', '#5bb68f', '#00649f'].reverse())\n\n  const blockWidth = 100;\n  const blockHeight = 8;\n\n  const core5 = players.slice(0, 5);\n  const rest = players.slice(5);\n  </script>\n\n  <style>\n    .item { \n      white-space: nowrap;\n      display: flex;\n      align-items: center;\n      line-height: 1.6;\n    }\n\n    .icon-item {\n      margin-right: 0.6ch;\n      width: 8px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n    svg.icon-item {\n      margin-top: -2px;\n    }\n\n    .name {\n      font-size: 10px;\n      letter-spacing: 0.5px;\n      color: #6462A1;\n      text-transform: uppercase;\n    }\n  \n    .divider {\n      margin: 8px 0;\n      border-top: 1px solid hsla(229deg, 69%, 35%, 0.5);\n    }\n  </style>\n\n  <div>\n    <div class=\"core5\">\n    {#each core5 as player, i}\n    <div class=\"item\">\n      {#if player.playoff_status === 'won-finals'}\n      <svg class=\"icon-item\" width=\"8\" height=\"15\" viewBox=\"0 0 8 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"2.95135\" cy=\"3.81872\" r=\"2.95135\" fill={colorScale(player.career_win_pct)}/>\n        <path d=\"M6.96225 6.77008H1.74063L3.32982 14.1106H0.908203V14.8674H7.4163V14.1106H6.35685L6.96225 6.77008Z\" fill={colorScale(player.career_win_pct)}/>\n        </svg>\n        \n      {:else}\n        <div class=\"icon-item\"><div style=\"border-radius: 5px; width: 5px; height: 5px; background-color: {player.career_gp === 0 ? noGpColor : colorScale(player.career_win_pct)};\"></div></div>\n      {/if}\n      <div class=\"name\">{player.name}</div>\n    </div>\n    {/each}\n  </div>\n  <div class=\"divider\">\n  </div>\n  <div class=\"rest\">\n    {#each rest as player, i}\n    <div class=\"item\">\n      {#if player.playoff_status === 'won-finals'}\n      <svg class=\"icon-item\" width=\"8\" height=\"15\" viewBox=\"0 0 8 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"2.95135\" cy=\"3.81872\" r=\"2.95135\" fill={colorScale(player.career_win_pct)}/>\n        <path d=\"M6.96225 6.77008H1.74063L3.32982 14.1106H0.908203V14.8674H7.4163V14.1106H6.35685L6.96225 6.77008Z\" fill={colorScale(player.career_win_pct)}/>\n        </svg>\n        \n      {:else}\n        <div class=\"icon-item\"><div style=\"border-radius: 5px; width: 5px; height: 5px; background-color: {player.career_gp === 0 ? noGpColor : colorScale(player.career_win_pct)};\"></div></div>\n      {/if}\n      <div class=\"name\">{player.name}</div>\n    </div>\n    {/each}\n  </div>\n\n  </div>"
  ],
  "names": [],
  "mappings": "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"
}